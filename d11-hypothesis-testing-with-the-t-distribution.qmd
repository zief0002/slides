---
title: "Day 11<br />Hypothesis Testing with the *t*-Distribution"
title-slide-attributes:
  data-background-image: "figs/title-bg.png"
  data-background-size: contain
subtitle: "<br /><br />EPSY 5261 : Introductory Statistical Methods"
format:
  revealjs: 
    theme: ["assets/epsy-5261-theme.scss"]
    chalkboard: true
highlight-style: nord
code-line-numbers: false
---



## Learning Goals

At the end of this lesson, you should be able to ...

- Describe the purpose of a hypothesis test.
- List the steps of a hypothesis test.
- <mark>Describe a parametric approach to hypothesis testing for a single mean.</mark>
- <mark>List the assumptions for using the *t*-distribution to test a single mean.</mark>



## Purpose of Hypothesis Testing

:::{.v-center-container}
To [test a claim]{style="text-decoration: underline;"} about a [population parameter]{style="text-decoration: underline;"}
:::


## Steps of Hypothesis Testing {#sec-slide-9}

1. Formulate a **research question**
2. Write your **hypotheses**
3. [Find **sampling distribution** assuming the null hypothesis is true]{.rn rn-type=highlight rn-multiline=true}
3. <mark>Find **sampling distribution** assuming the null hypothesis is true</mark>
4. **Compare** sample summary to the distribution under the null hypothesis
5. Get a **_p_-value**
6. Make a **decision** based on the *p*-value 
7. Communicate your **conclusion** in context


## Hypothesis Testing Example {.center background-image="figs/section-bg.png" background-size=contain}


## Estimating Sampling Variability

- **Goal:** Get an estimate for the sampling variability expected given this sample
  + Simulation (resampling methods)
  + <mark>Traditional Parametric Methods (a mathematical function)</mark>



## Theoretical Distribution

- Up until now, we have looked at *approximations* of the sampling distribution, with simulation.
- Now, we will look at *theoretical distributions* of sample statistics


## Sampling Distribution

- Recall: in the Day 5 activity when we resampled we had a distribution centered at the sample statistic.
- In hypothesis testing we want a distribution centered at the null hypothesized value.


## Normal Distributions

- Normal distributions are bell shaped, symmetric distributions characterized by:
  + Mean (center) 
  + Standard deviation (variability)


## Normal Distributions

```{r}
#| message: false
library(ggplot2)
library(ggprism)
ggplot(data = data.frame(x = c(-5,5)), aes(x)) +
  stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 0.5), color = "#FF2F92", linewidth = 1.2) + 
  scale_y_continuous(name = "Density", breaks = NULL) +
  scale_x_continuous(name = "Standardized Score", breaks = -5:5, limits= c(-5, 5)) +
  theme_prism() +
  annotate("text", x = 2.5, y = 1, label = "mu==0~~sigma==0.5", parse = TRUE, color = "#FF2F92", hjust = 0)
```

---

```{r}
ggplot(data = data.frame(x = c(-5,5)), aes(x)) +
  stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 0.5), color = "#FF2F92") + 
  stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 1), color = "#5B7BE9", linewidth = 1.2) +
  scale_y_continuous(name = "Density", breaks = NULL) +
  scale_x_continuous(name = "Standardized Score", breaks = -5:5, limits= c(-5, 5)) +
  theme_prism() +
  annotate("text", x = 2.5, y = 1, label = "mu==0~~sigma==0.5", parse = TRUE, color = "#FF2F92", hjust = 0) +
  annotate("text", x = 2.5, y = 0.95, label = "mu==0~~sigma==1", parse = TRUE, color = "#5B7BE9", hjust = 0)
```

--- 

```{r}
ggplot(data = data.frame(x = c(-5,5)), aes(x)) +
  stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 0.5), color = "#FF2F92") + 
  stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 1), color = "#5B7BE9") +
  stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 2.25), color = "#FB7F23", linewidth = 1.2) +
  scale_y_continuous(name = "Density", breaks = NULL) +
  scale_x_continuous(name = "Standardized Score", breaks = -5:5, limits= c(-5, 5)) +
  theme_prism() +
  annotate("text", x = 2.5, y = 1, label = "mu==0~~sigma==0.5", parse = TRUE, color = "#FF2F92", hjust = 0) +
  annotate("text", x = 2.5, y = 0.95, label = "mu==0~~sigma==1", parse = TRUE, color = "#5B7BE9", hjust = 0) +
  annotate("text", x = 2.5, y = 0.9, label = "mu==0~~sigma==2.25", parse = TRUE, color = "#FB7F23", hjust = 0)
```

---

```{r}
ggplot(data = data.frame(x = c(-5,5)), aes(x)) +
  stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 0.5), color = "#FF2F92") + 
  stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 1), color = "#5B7BE9") +
  stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 2.25), color = "#FB7F23") +
  stat_function(fun = dnorm, n = 101, args = list(mean = -2, sd = 0.8), color = "#B190D0", linewidth = 1.2) +
  scale_y_continuous(name = "Density", breaks = NULL) +
  scale_x_continuous(name = "Standardized Score", breaks = -5:5, limits= c(-5, 5)) +
  theme_prism() +
  annotate("text", x = 2.5, y = 1, label = "mu==0~~sigma==0.5", parse = TRUE, color = "#FF2F92", hjust = 0) +
  annotate("text", x = 2.5, y = 0.95, label = "mu==0~~sigma==1", parse = TRUE, color = "#5B7BE9", hjust = 0) +
  annotate("text", x = 2.5, y = 0.9, label = "mu==0~~sigma==2.25", parse = TRUE, color = "#FB7F23", hjust = 0) +
  annotate("text", x = 2.5, y = 0.85, label = "mu==-2~~sigma==0.8", parse = TRUE, color = "#B190D0", hjust = 0)
```

---

```{r}
ggplot(data = data.frame(x = c(-5,5)), aes(x)) +
  stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 0.5), color = "#FF2F92") + 
  stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 1), color = "#5B7BE9") +
  stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 2.25), color = "#FB7F23") +
  stat_function(fun = dnorm, n = 101, args = list(mean = -2, sd = 0.8), color = "#B190D0") +
  stat_function(fun = dnorm, n = 101, args = list(mean = 3, sd = 0.65), color = "#01D99F", linewidth = 1.2) +
  scale_y_continuous(name = "Density", breaks = NULL) +
  scale_x_continuous(name = "Standardized Score", breaks = -5:5, limits= c(-5, 5)) +
  theme_prism() +
  annotate("text", x = 2.5, y = 1, label = "mu==0~~sigma==0.5", parse = TRUE, color = "#FF2F92", hjust = 0) +
  annotate("text", x = 2.5, y = 0.95, label = "mu==0~~sigma==1", parse = TRUE, color = "#5B7BE9", hjust = 0) +
  annotate("text", x = 2.5, y = 0.9, label = "mu==0~~sigma==2.25", parse = TRUE, color = "#FB7F23", hjust = 0) +
  annotate("text", x = 2.5, y = 0.85, label = "mu==-2~~sigma==0.8", parse = TRUE, color = "#B190D0", hjust = 0) +
  annotate("text", x = 2.5, y = 0.8, label = "mu==3~~sigma==0.65", parse = TRUE, color = "#01D99F", hjust = 0)
```


## Central Limit Theorem (CLT)

- Mathematical theorem that informs us about the shape, center, and variation in the sampling distribution (i.e., the distribution of sample statistics)
- It says if we know the population mean ($\mu$ or $\pi$) and the population standard deviation ($\sigma$) then...
  + For random samples with a sufficiently large sample size, the distribution of sample statistics for a mean or a proportion is approximately **normally distributed** and centered at the value of the population parameter.


## *t*-Distribution

- The mathematical approximation for our sampling distribution when we don't know the population standard deviation ($\sigma$)
- *t*-distribution is very similar in shape to the normal distribution, but with slightly thicker tails 
- *t*-distribution is always centered at 0
- Because we are looking for an estimate for the variability in our sample we will be able to calculate that to be 

$$
SE = \frac{s}{\sqrt{n}}
$$


## Degrees-of-Freedom

- The *t*-distribution is characterized by degrees-of-freedom (*df*)
- *df* is calculated based on sample size
- The higher the *df*, the closer the *t*-distribution gets to the normal distribution


## *t*-Distributions

```{r}
ggplot(data = data.frame(x = c(-5,5)), aes(x)) +
  stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 1), color = "#621448") +
  scale_y_continuous(name = "Density", breaks = NULL) +
  scale_x_continuous(name = "Standardized Score", breaks = -5:5, limits= c(-5, 5)) +
  theme_prism() +
  annotate("text", x = 2.5, y = .35, label = "mu==0~~sigma==1", parse = TRUE, color = "#621448", hjust = 0)
```

---

```{r}
ggplot(data = data.frame(x = c(-5,5)), aes(x)) +
  stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 1), color = "#621448") + 
  stat_function(fun = dt, n = 101, args = list(df = 5), color = "#80d65c") +
  scale_y_continuous(name = "Density", breaks = NULL) +
  scale_x_continuous(name = "Standardized Score", breaks = -5:5, limits= c(-5, 5)) +
  theme_prism() +
  annotate("text", x = 2.5, y = .35, label = "mu==0~~sigma==1", parse = TRUE, color = "#621448", hjust = 0) +
  annotate("text", x = 2.5, y = 0.3, label = "t(df=5)", color = "#80d65c", hjust = 0)
```

---

```{r}
ggplot(data = data.frame(x = c(-5,5)), aes(x)) +
  stat_function(fun = dnorm, n = 101, args = list(mean = 0, sd = 1), color = "#621448") + 
  stat_function(fun = dt, n = 101, args = list(df = 5), color = "#80d65c") +
  stat_function(fun = dt, n = 101, args = list(df = 15), color = "#36a6fc") +
  scale_y_continuous(name = "Density", breaks = NULL) +
  scale_x_continuous(name = "Standardized Score", breaks = -5:5, limits= c(-5, 5)) +
  theme_prism() +
  annotate("text", x = 2.5, y = 0.35, label = "mu==0~~sigma==1", parse = TRUE, color = "#621448", hjust = 0) +
  annotate("text", x = 2.5, y = 0.3, label = "t(df=5)", color = "#80d65c", hjust = 0) +
  annotate("text", x = 2.5, y = 0.25, label = "t(df=15)", color = "#36a6fc", hjust = 0)
```


## Assumptions

- The distribution of values in the population is normally distributed
  + We will check a histogram or density plot of our sample to confirm this
  + Note: If the sample size is greater than 30 we can use the *t*-distribution without our sample being normally distributed (because of the *Central Limit Theorem*)
- The values in the population are independent from each other 
  + We will think about this one based on the context


## Use R Studio

- Instead of doing a simulation we can use the *t*-distribution to help us get our estimate for the variability in the sampling distribution
- Use functions in R Studio to also give us our *p*-value
- We will explore the entire hypothesis test process in today's activity!



## Hypothesis Testing with the *t*-Distribution Activity {.center background-image="figs/section-bg.png" background-size=contain}


## Summary

- There are many steps to the hypothesis test (overview on [Slide 9](#sec-slide-9)).
- Hypothesis tests help us test a claim while taking into account sampling variability.
- They provide one form of evidence to help answer a research question.
- <mark>We can use a t-distribution to help us conduct our test as an alternative method to simulation.</mark>





